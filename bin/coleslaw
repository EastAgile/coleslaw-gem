#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

begin
  require 'quickl'
  require 'rest-client'
  require 'json'
rescue LoadError
  require 'rubygems'
  gem 'quickl'
  gem 'curb'
  retry
end

#
# Command Line Interface for https://www.coleslawapp.com - The easiest way to share your BDD features with product owner
#
# SYNOPSIS
#   #{command_name} [options] PROJECT_TOKEN
#
# OPTIONS
# #{summarized_options}
#
class Coleslaw < Quickl::Command(__FILE__, __LINE__)

  VERSION   = "1.1.0"
  DEFAULT_FEATURES_DIR = "./features"
  DEFAULT_REPORTS_DIR = "./features/reports"
  DEFAULT_SERVER = "https://www.coleslawapp.com"

  # Install options
  options do |opt|
    opt.on_tail('--help', "Show this help message"){ raise Quickl::Help }
    opt.on_tail('--version', "Show version and exit"){ raise Quickl::Exit, "#{Quickl.program_name} #{VERSION}" }
    opt.on('--token [API_TOKEN]', "Set your access token") { |t| @token = t }
    opt.on('--features-dir [FDIR]', "Set the features directory, default to #{DEFAULT_FEATURES_DIR}") do |features_dir|
      @features_dir = features_dir
    end
    opt.on('--reports-dir [RDIR]', "Set the reports directory, default to #{DEFAULT_REPORTS_DIR}") do |reports_dir|
      @reports_dir = reports_dir
    end
    opt.on('--server [SERVER]', "Set the server, default to #{DEFAULT_SERVER}") do |server|
      @server = server
    end
  end

  def server
    @server ||= DEFAULT_SERVER
  end

  def features_dir
    @features_dir ||= DEFAULT_FEATURES_DIR
  end

  def reports_dir
    @reports_dir ||= DEFAULT_REPORTS_DIR
  end

  def token
    @token ||= (
      t = read_token_from_current_working_dir
      t ||= read_token_from_home_dir
      t.strip! unless t.nil?
      t
    )
  end

  def read_token_from_current_working_dir
    if File.exist?("~/.coleslaw")
      File.open("~/.coleslaw") do |f|
        return f.read
      end
    end
  end

  def read_token_from_home_dir
    if File.exist?(".coleslaw")
      File.open(".coleslaw") do |f|
        return f.read
      end
    end
  end

  def execute(args)
    unless token
      raise Quickl::InvalidArgument, "Please provide token by either use --token or create .coleslaw file in your current working directory"
    end

    project_token = args.first

    unless project_token
      raise Quickl::InvalidArgument, "Please provide project token"
    end

    puts "Creating new test result..."
    if (test_result_id = create_test_result(project_token))
      test_result_files.each do |test_result_file|
        puts "Uploading [#{test_result_file}]"
        upload_test_result_file(project_token, test_result_id, test_result_file)
      end
      puts "Successfully created test result ##{test_result_id}"
    end
  end

  def request_options
    { content_type: :json, :accept => :json, :'Token-Secret' => token }
  end

  def create_test_result(project_token)
    response = RestClient.post(
        server + "/projects/#{project_token}/test_results",
        {},
        **request_options
    )

    test_result = JSON.parse(response.body)
    test_result["id"]
  rescue => e
    STDERR.puts e.http_body
    nil
  end

  def upload_test_result_file(project_token, test_result_id, test_result_file)
    RestClient.post(
      server + "/projects/#{project_token}/test_results/#{test_result_id}/add_file",
      request_payload(test_result_file),
      **request_options
    ) do |response, request, result, &block|
      unless [301, 302, 307].include? response.code # RestClient does not handle redirects on POST
        response.return!(request, result, &block)
      end
    end
  end

  def test_result_files
    Dir[features_dir + "/**/*.feature"] + Dir[reports_dir + "/**/*.xml"]
  end

  def request_payload(test_result_file)
    file = File.new(test_result_file, 'rb')
    group = File.basename(File.dirname(file)) # Name of the parent directory
    { file: file, group: group }
  end
end

Coleslaw.run(ARGV)
